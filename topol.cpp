/***************************************************************************
  topol.cpp 
  Better attribute table
  -------------------
         begin                : 2008
         copyright            : Vita Cizek
         email                : weetya (strange_letter_a) gmail.com

 ***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
/*  $Id: plugin.cpp 8053 2008-01-26 13:59:53Z timlinux $ */

//
// QGIS Specific includes
//

#include <qgsmaplayer.h>
#include <qgisinterface.h>
#include <qgisgui.h>

#include "topol.h"
#include "TopolDialog.h"
#include "rulesDialog.h"

//
// Qt4 Related Includes
//

#include <QAction>
#include <QToolBar>
#include <QMessageBox>

static const char * const sIdent = "$Id: plugin.cpp 8053 2008-01-26 13:59:53Z timlinux $";
static const QString sName = QObject::tr("TOPOL");
static const QString sDescription = QObject::tr("Topology Checker Plugin");
static const QString sPluginVersion = QObject::tr("Version 0.1");
static const QgisPlugin::PLUGINTYPE sPluginType = QgisPlugin::UI;

//////////////////////////////////////////////////////////////////////
//
// THE FOLLOWING METHODS ARE MANDATORY FOR ALL PLUGINS
//
//////////////////////////////////////////////////////////////////////

/**
 * Constructor for the plugin. The plugin is passed a pointer 
 * an interface object that provides access to exposed functions in QGIS.
 * @param theQGisInterface - Pointer to the QGIS interface object
 */
Topol::Topol(QgisInterface * theQgisInterface):
                 QgisPlugin(sName,sDescription,sPluginVersion,sPluginType),
                 mQGisIface(theQgisInterface)
{
}

Topol::~Topol()
{
}

/*
 * Initialize the GUI interface for the plugin - this is only called once when the plugin is 
 * added to the plugin registry in the QGIS application.
 */
void Topol::initGui()
{

  // Create the action for tool
  mQActionPointer = new QAction(QIcon(":/topol/topol.png"),tr("Topology Checker"), this);
  // Set the what's this text
  mQActionPointer->setWhatsThis(tr("Open Topology Checker for vector layer"));
  // Connect the action to the run
  connect(mQActionPointer, SIGNAL(triggered()), this, SLOT(run()));
  // Add the icon to the toolbar
  mQGisIface->addToolBarIcon(mQActionPointer);
  mQGisIface->addPluginToMenu(tr("&Topol"), mQActionPointer);

  //mRulesPointer = new QAction(QIcon(":/topol/topol.png"),tr("Topology Checker"), this);
  //connect(mRulesPointer, SIGNAL(triggered()), this, SLOT(rules()));
  //mQGisIface->addToolBarIcon(mRulesPointer);
  //mQGisIface->addPluginToMenu(tr("&Rules"), mRulesPointer);

}
//method defined in interface
void Topol::help()
{
  //implement me!
}

// Slot called when the menu item is triggered
// If you created more menu items / toolbar buttons in initiGui, you should 
// create a separate handler for each action - this single run() method will
// not be enough
void Topol::run()
{
  
  QgsMapLayer *myLayer = mQGisIface->activeLayer();

  if (myLayer == NULL || myLayer->type() != QgsMapLayer::VectorLayer) {
    QMessageBox::information(mQGisIface->mainWindow(), "No layer", "Select a vector layer!");
    return;
  }

  TopolDialog* topolDia = new TopolDialog("TOPOL", (QgsVectorLayer *)(myLayer));
  rulesDialog* rulesDia = new rulesDialog("Rules", (QgsVectorLayer *)(myLayer));
  rulesDia->show();
  //topolDia->show();
}

// Unload the plugin by cleaning up the GUI
void Topol::unload()
{
  // remove the GUI
  mQGisIface->removePluginMenu("&Topol",mQActionPointer);
  mQGisIface->removeToolBarIcon(mQActionPointer);
  //mQGisIface->removePluginMenu("&Rules",mRulesPointer);
  //mQGisIface->removeToolBarIcon(mRulesPointer);
  delete mQActionPointer;
  //delete mRulesPointer;
}


//////////////////////////////////////////////////////////////////////////
//
//
//  THE FOLLOWING CODE IS AUTOGENERATED BY THE PLUGIN BUILDER SCRIPT
//    YOU WOULD NORMALLY NOT NEED TO MODIFY THIS, AND YOUR PLUGIN
//      MAY NOT WORK PROPERLY IF YOU MODIFY THIS INCORRECTLY
//
//
//////////////////////////////////////////////////////////////////////////


/** 
 * Required extern functions needed  for every plugin 
 * These functions can be called prior to creating an instance
 * of the plugin class
 */
// Class factory to return a new instance of the plugin class
QGISEXTERN QgisPlugin * classFactory(QgisInterface * theQgisInterfacePointer)
{
  return new Topol(theQgisInterfacePointer);
}
// Return the name of the plugin - note that we do not user class members as
// the class may not yet be insantiated when this method is called.
QGISEXTERN QString name()
{
  return sName;
}

// Return the description
QGISEXTERN QString description()
{
  return sDescription;
}

// Return the type (either UI or MapLayer plugin)
QGISEXTERN int type()
{
  return sPluginType;
}

// Return the version number for the plugin
QGISEXTERN QString version()
{
  return sPluginVersion;
}

// Delete ourself
QGISEXTERN void unload(QgisPlugin * thePluginPointer)
{
  delete thePluginPointer;
}
